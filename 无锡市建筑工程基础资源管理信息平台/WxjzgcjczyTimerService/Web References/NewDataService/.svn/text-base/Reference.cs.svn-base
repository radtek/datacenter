//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8009
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.8009 版自动生成。
// 
#pragma warning disable 1591

namespace WxjzgcjczyTimerService.NewDataService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NewDataServiceSoap11Binding", Namespace="http://webservice.datecenter.jscedc")]
    public partial class NewDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getOutCorpQual_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutPersonCert_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpQual_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpCert_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpInfo_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpCert_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpQual_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonTitleCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonJobCert_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpInfo_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegCert_CorpOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegPhoto_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegCert_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpCert_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonTitleCert_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonJobCert_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getClientIpAxisOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonTitleCert_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutPersonCert_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegPhoto_CorpOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegPhoto_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegCert_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegPhoto_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpQualOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpInfo_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutPersonCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonJobCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonJobCert_CorpOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpInfo_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegCert_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutPersonCert_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonTitleCert_CorpOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonTitleCert_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOutCorpInfo_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCorpInfo_IncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonJobCert_PacketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersonRegPhotoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NewDataService() {
            this.Url = global::WxjzgcjczyTimerService.Properties.Settings.Default.WxjzgcjczyTimerService3_0_NewDataService_NewDataService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getOutCorpQual_IncCompletedEventHandler getOutCorpQual_IncCompleted;
        
        /// <remarks/>
        public event getOutPersonCert_SingleCompletedEventHandler getOutPersonCert_SingleCompleted;
        
        /// <remarks/>
        public event getOutCorpQual_SingleCompletedEventHandler getOutCorpQual_SingleCompleted;
        
        /// <remarks/>
        public event getCorpCert_PacketCompletedEventHandler getCorpCert_PacketCompleted;
        
        /// <remarks/>
        public event getCorpInfo_PacketCompletedEventHandler getCorpInfo_PacketCompleted;
        
        /// <remarks/>
        public event getCorpCert_SingleCompletedEventHandler getCorpCert_SingleCompleted;
        
        /// <remarks/>
        public event getOutCorpQual_PacketCompletedEventHandler getOutCorpQual_PacketCompleted;
        
        /// <remarks/>
        public event getPersonTitleCertCompletedEventHandler getPersonTitleCertCompleted;
        
        /// <remarks/>
        public event getDataUserCompletedEventHandler getDataUserCompleted;
        
        /// <remarks/>
        public event getPersonJobCert_IncCompletedEventHandler getPersonJobCert_IncCompleted;
        
        /// <remarks/>
        public event getOutCorpInfo_IncCompletedEventHandler getOutCorpInfo_IncCompleted;
        
        /// <remarks/>
        public event getPersonRegCert_CorpCompletedEventHandler getPersonRegCert_CorpCompleted;
        
        /// <remarks/>
        public event getPersonRegCertCompletedEventHandler getPersonRegCertCompleted;
        
        /// <remarks/>
        public event getPersonRegPhoto_PacketCompletedEventHandler getPersonRegPhoto_PacketCompleted;
        
        /// <remarks/>
        public event getPersonRegCert_SingleCompletedEventHandler getPersonRegCert_SingleCompleted;
        
        /// <remarks/>
        public event getCorpCert_IncCompletedEventHandler getCorpCert_IncCompleted;
        
        /// <remarks/>
        public event getPersonTitleCert_PacketCompletedEventHandler getPersonTitleCert_PacketCompleted;
        
        /// <remarks/>
        public event getPersonJobCert_SingleCompletedEventHandler getPersonJobCert_SingleCompleted;
        
        /// <remarks/>
        public event getOutCorpInfoCompletedEventHandler getOutCorpInfoCompleted;
        
        /// <remarks/>
        public event getClientIpAxisCompletedEventHandler getClientIpAxisCompleted;
        
        /// <remarks/>
        public event getPersonTitleCert_IncCompletedEventHandler getPersonTitleCert_IncCompleted;
        
        /// <remarks/>
        public event getOutPersonCert_IncCompletedEventHandler getOutPersonCert_IncCompleted;
        
        /// <remarks/>
        public event getPersonRegPhoto_CorpCompletedEventHandler getPersonRegPhoto_CorpCompleted;
        
        /// <remarks/>
        public event getPersonRegPhoto_IncCompletedEventHandler getPersonRegPhoto_IncCompleted;
        
        /// <remarks/>
        public event getPersonRegCert_PacketCompletedEventHandler getPersonRegCert_PacketCompleted;
        
        /// <remarks/>
        public event getPersonRegPhoto_SingleCompletedEventHandler getPersonRegPhoto_SingleCompleted;
        
        /// <remarks/>
        public event getCorpCertCompletedEventHandler getCorpCertCompleted;
        
        /// <remarks/>
        public event getOutCorpQualCompletedEventHandler getOutCorpQualCompleted;
        
        /// <remarks/>
        public event getOutCorpInfo_SingleCompletedEventHandler getOutCorpInfo_SingleCompleted;
        
        /// <remarks/>
        public event getOutPersonCertCompletedEventHandler getOutPersonCertCompleted;
        
        /// <remarks/>
        public event getPersonJobCertCompletedEventHandler getPersonJobCertCompleted;
        
        /// <remarks/>
        public event getPersonJobCert_CorpCompletedEventHandler getPersonJobCert_CorpCompleted;
        
        /// <remarks/>
        public event getCorpInfo_SingleCompletedEventHandler getCorpInfo_SingleCompleted;
        
        /// <remarks/>
        public event getPersonRegCert_IncCompletedEventHandler getPersonRegCert_IncCompleted;
        
        /// <remarks/>
        public event getOutPersonCert_PacketCompletedEventHandler getOutPersonCert_PacketCompleted;
        
        /// <remarks/>
        public event getPersonTitleCert_CorpCompletedEventHandler getPersonTitleCert_CorpCompleted;
        
        /// <remarks/>
        public event getPersonTitleCert_SingleCompletedEventHandler getPersonTitleCert_SingleCompleted;
        
        /// <remarks/>
        public event getCorpInfoCompletedEventHandler getCorpInfoCompleted;
        
        /// <remarks/>
        public event getOutCorpInfo_PacketCompletedEventHandler getOutCorpInfo_PacketCompleted;
        
        /// <remarks/>
        public event getCorpInfo_IncCompletedEventHandler getCorpInfo_IncCompleted;
        
        /// <remarks/>
        public event getPersonJobCert_PacketCompletedEventHandler getPersonJobCert_PacketCompleted;
        
        /// <remarks/>
        public event getPersonRegPhotoCompletedEventHandler getPersonRegPhotoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpQual_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpQual_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpQual_Inc", new object[] {
                        UserID,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpQual_IncAsync(string UserID, string StartDate, string EndDate, string IsZip) {
            this.getOutCorpQual_IncAsync(UserID, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpQual_IncAsync(string UserID, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getOutCorpQual_IncOperationCompleted == null)) {
                this.getOutCorpQual_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpQual_IncOperationCompleted);
            }
            this.InvokeAsync("getOutCorpQual_Inc", new object[] {
                        UserID,
                        StartDate,
                        EndDate,
                        IsZip}, this.getOutCorpQual_IncOperationCompleted, userState);
        }
        
        private void OngetOutCorpQual_IncOperationCompleted(object arg) {
            if ((this.getOutCorpQual_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpQual_IncCompleted(this, new getOutCorpQual_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutPersonCert_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutPersonCert_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutPersonCert_Single", new object[] {
                        UserID,
                        CorpCode,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutPersonCert_SingleAsync(string UserID, string CorpCode, string IsZip) {
            this.getOutPersonCert_SingleAsync(UserID, CorpCode, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutPersonCert_SingleAsync(string UserID, string CorpCode, string IsZip, object userState) {
            if ((this.getOutPersonCert_SingleOperationCompleted == null)) {
                this.getOutPersonCert_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutPersonCert_SingleOperationCompleted);
            }
            this.InvokeAsync("getOutPersonCert_Single", new object[] {
                        UserID,
                        CorpCode,
                        IsZip}, this.getOutPersonCert_SingleOperationCompleted, userState);
        }
        
        private void OngetOutPersonCert_SingleOperationCompleted(object arg) {
            if ((this.getOutPersonCert_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutPersonCert_SingleCompleted(this, new getOutPersonCert_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpQual_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpQual_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpQual_Single", new object[] {
                        UserID,
                        CorpCode,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpQual_SingleAsync(string UserID, string CorpCode, string IsZip) {
            this.getOutCorpQual_SingleAsync(UserID, CorpCode, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpQual_SingleAsync(string UserID, string CorpCode, string IsZip, object userState) {
            if ((this.getOutCorpQual_SingleOperationCompleted == null)) {
                this.getOutCorpQual_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpQual_SingleOperationCompleted);
            }
            this.InvokeAsync("getOutCorpQual_Single", new object[] {
                        UserID,
                        CorpCode,
                        IsZip}, this.getOutCorpQual_SingleOperationCompleted, userState);
        }
        
        private void OngetOutCorpQual_SingleOperationCompleted(object arg) {
            if ((this.getOutCorpQual_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpQual_SingleCompleted(this, new getOutCorpQual_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpCert_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpCert_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpCert_PacketAsync(string UserID, string CityCode, string CountyCode, string CertType, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getCorpCert_PacketAsync(UserID, CityCode, CountyCode, CertType, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpCert_PacketAsync(string UserID, string CityCode, string CountyCode, string CertType, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getCorpCert_PacketOperationCompleted == null)) {
                this.getCorpCert_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpCert_PacketOperationCompleted);
            }
            this.InvokeAsync("getCorpCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getCorpCert_PacketOperationCompleted, userState);
        }
        
        private void OngetCorpCert_PacketOperationCompleted(object arg) {
            if ((this.getCorpCert_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpCert_PacketCompleted(this, new getCorpCert_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpInfo_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpInfo_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpInfo_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpInfo_PacketAsync(string UserID, string CityCode, string CountyCode, string CertType, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getCorpInfo_PacketAsync(UserID, CityCode, CountyCode, CertType, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpInfo_PacketAsync(string UserID, string CityCode, string CountyCode, string CertType, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getCorpInfo_PacketOperationCompleted == null)) {
                this.getCorpInfo_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpInfo_PacketOperationCompleted);
            }
            this.InvokeAsync("getCorpInfo_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getCorpInfo_PacketOperationCompleted, userState);
        }
        
        private void OngetCorpInfo_PacketOperationCompleted(object arg) {
            if ((this.getCorpInfo_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpInfo_PacketCompleted(this, new getCorpInfo_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpCert_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpCert_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpCert_Single", new object[] {
                        UserID,
                        CorpCode,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpCert_SingleAsync(string UserID, string CorpCode, string CertType, string IsZip) {
            this.getCorpCert_SingleAsync(UserID, CorpCode, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpCert_SingleAsync(string UserID, string CorpCode, string CertType, string IsZip, object userState) {
            if ((this.getCorpCert_SingleOperationCompleted == null)) {
                this.getCorpCert_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpCert_SingleOperationCompleted);
            }
            this.InvokeAsync("getCorpCert_Single", new object[] {
                        UserID,
                        CorpCode,
                        CertType,
                        IsZip}, this.getCorpCert_SingleOperationCompleted, userState);
        }
        
        private void OngetCorpCert_SingleOperationCompleted(object arg) {
            if ((this.getCorpCert_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpCert_SingleCompleted(this, new getCorpCert_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpQual_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpQual_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpQual_Packet", new object[] {
                        UserID,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpQual_PacketAsync(string UserID, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getOutCorpQual_PacketAsync(UserID, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpQual_PacketAsync(string UserID, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getOutCorpQual_PacketOperationCompleted == null)) {
                this.getOutCorpQual_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpQual_PacketOperationCompleted);
            }
            this.InvokeAsync("getOutCorpQual_Packet", new object[] {
                        UserID,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getOutCorpQual_PacketOperationCompleted, userState);
        }
        
        private void OngetOutCorpQual_PacketOperationCompleted(object arg) {
            if ((this.getOutCorpQual_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpQual_PacketCompleted(this, new getOutCorpQual_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonTitleCert", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonTitleCert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonTitleCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonTitleCertAsync(string UserID, string CityCode, string CountyCode, string IsZip) {
            this.getPersonTitleCertAsync(UserID, CityCode, CountyCode, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonTitleCertAsync(string UserID, string CityCode, string CountyCode, string IsZip, object userState) {
            if ((this.getPersonTitleCertOperationCompleted == null)) {
                this.getPersonTitleCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonTitleCertOperationCompleted);
            }
            this.InvokeAsync("getPersonTitleCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        IsZip}, this.getPersonTitleCertOperationCompleted, userState);
        }
        
        private void OngetPersonTitleCertOperationCompleted(object arg) {
            if ((this.getPersonTitleCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonTitleCertCompleted(this, new getPersonTitleCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getDataUser", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public TDataServiceUser getDataUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID) {
            object[] results = this.Invoke("getDataUser", new object[] {
                        UserID});
            return ((TDataServiceUser)(results[0]));
        }
        
        /// <remarks/>
        public void getDataUserAsync(string UserID) {
            this.getDataUserAsync(UserID, null);
        }
        
        /// <remarks/>
        public void getDataUserAsync(string UserID, object userState) {
            if ((this.getDataUserOperationCompleted == null)) {
                this.getDataUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataUserOperationCompleted);
            }
            this.InvokeAsync("getDataUser", new object[] {
                        UserID}, this.getDataUserOperationCompleted, userState);
        }
        
        private void OngetDataUserOperationCompleted(object arg) {
            if ((this.getDataUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataUserCompleted(this, new getDataUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonJobCert_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonJobCert_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonJobCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonJobCert_IncAsync(string UserID, string CityCode, string CountyCode, string CertType, string StartDate, string EndDate, string IsZip) {
            this.getPersonJobCert_IncAsync(UserID, CityCode, CountyCode, CertType, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonJobCert_IncAsync(string UserID, string CityCode, string CountyCode, string CertType, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getPersonJobCert_IncOperationCompleted == null)) {
                this.getPersonJobCert_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonJobCert_IncOperationCompleted);
            }
            this.InvokeAsync("getPersonJobCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        StartDate,
                        EndDate,
                        IsZip}, this.getPersonJobCert_IncOperationCompleted, userState);
        }
        
        private void OngetPersonJobCert_IncOperationCompleted(object arg) {
            if ((this.getPersonJobCert_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonJobCert_IncCompleted(this, new getPersonJobCert_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpInfo_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpInfo_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpInfo_Inc", new object[] {
                        UserID,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpInfo_IncAsync(string UserID, string StartDate, string EndDate, string IsZip) {
            this.getOutCorpInfo_IncAsync(UserID, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpInfo_IncAsync(string UserID, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getOutCorpInfo_IncOperationCompleted == null)) {
                this.getOutCorpInfo_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpInfo_IncOperationCompleted);
            }
            this.InvokeAsync("getOutCorpInfo_Inc", new object[] {
                        UserID,
                        StartDate,
                        EndDate,
                        IsZip}, this.getOutCorpInfo_IncOperationCompleted, userState);
        }
        
        private void OngetOutCorpInfo_IncOperationCompleted(object arg) {
            if ((this.getOutCorpInfo_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpInfo_IncCompleted(this, new getOutCorpInfo_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegCert_Corp", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegCert_Corp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegCert_Corp", new object[] {
                        UserID,
                        CorpCode,
                        RegType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegCert_CorpAsync(string UserID, string CorpCode, string RegType, string IsZip) {
            this.getPersonRegCert_CorpAsync(UserID, CorpCode, RegType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegCert_CorpAsync(string UserID, string CorpCode, string RegType, string IsZip, object userState) {
            if ((this.getPersonRegCert_CorpOperationCompleted == null)) {
                this.getPersonRegCert_CorpOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegCert_CorpOperationCompleted);
            }
            this.InvokeAsync("getPersonRegCert_Corp", new object[] {
                        UserID,
                        CorpCode,
                        RegType,
                        IsZip}, this.getPersonRegCert_CorpOperationCompleted, userState);
        }
        
        private void OngetPersonRegCert_CorpOperationCompleted(object arg) {
            if ((this.getPersonRegCert_CorpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegCert_CorpCompleted(this, new getPersonRegCert_CorpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegCert", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegCert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegCertAsync(string UserID, string CityCode, string CountyCode, string RegType, string IsZip) {
            this.getPersonRegCertAsync(UserID, CityCode, CountyCode, RegType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegCertAsync(string UserID, string CityCode, string CountyCode, string RegType, string IsZip, object userState) {
            if ((this.getPersonRegCertOperationCompleted == null)) {
                this.getPersonRegCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegCertOperationCompleted);
            }
            this.InvokeAsync("getPersonRegCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        IsZip}, this.getPersonRegCertOperationCompleted, userState);
        }
        
        private void OngetPersonRegCertOperationCompleted(object arg) {
            if ((this.getPersonRegCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegCertCompleted(this, new getPersonRegCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegPhoto_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegPhoto_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegPhoto_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_PacketAsync(string UserID, string CityCode, string CountyCode, string RegType, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getPersonRegPhoto_PacketAsync(UserID, CityCode, CountyCode, RegType, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_PacketAsync(string UserID, string CityCode, string CountyCode, string RegType, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getPersonRegPhoto_PacketOperationCompleted == null)) {
                this.getPersonRegPhoto_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegPhoto_PacketOperationCompleted);
            }
            this.InvokeAsync("getPersonRegPhoto_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getPersonRegPhoto_PacketOperationCompleted, userState);
        }
        
        private void OngetPersonRegPhoto_PacketOperationCompleted(object arg) {
            if ((this.getPersonRegPhoto_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegPhoto_PacketCompleted(this, new getPersonRegPhoto_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegCert_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegCert_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IDCardNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegCert_Single", new object[] {
                        UserID,
                        IDCardNo,
                        RegType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegCert_SingleAsync(string UserID, string IDCardNo, string RegType, string IsZip) {
            this.getPersonRegCert_SingleAsync(UserID, IDCardNo, RegType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegCert_SingleAsync(string UserID, string IDCardNo, string RegType, string IsZip, object userState) {
            if ((this.getPersonRegCert_SingleOperationCompleted == null)) {
                this.getPersonRegCert_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegCert_SingleOperationCompleted);
            }
            this.InvokeAsync("getPersonRegCert_Single", new object[] {
                        UserID,
                        IDCardNo,
                        RegType,
                        IsZip}, this.getPersonRegCert_SingleOperationCompleted, userState);
        }
        
        private void OngetPersonRegCert_SingleOperationCompleted(object arg) {
            if ((this.getPersonRegCert_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegCert_SingleCompleted(this, new getPersonRegCert_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpCert_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpCert_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpCert_IncAsync(string UserID, string CityCode, string CountyCode, string CertType, string StartDate, string EndDate, string IsZip) {
            this.getCorpCert_IncAsync(UserID, CityCode, CountyCode, CertType, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpCert_IncAsync(string UserID, string CityCode, string CountyCode, string CertType, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getCorpCert_IncOperationCompleted == null)) {
                this.getCorpCert_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpCert_IncOperationCompleted);
            }
            this.InvokeAsync("getCorpCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        StartDate,
                        EndDate,
                        IsZip}, this.getCorpCert_IncOperationCompleted, userState);
        }
        
        private void OngetCorpCert_IncOperationCompleted(object arg) {
            if ((this.getCorpCert_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpCert_IncCompleted(this, new getCorpCert_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonTitleCert_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonTitleCert_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonTitleCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonTitleCert_PacketAsync(string UserID, string CityCode, string CountyCode, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getPersonTitleCert_PacketAsync(UserID, CityCode, CountyCode, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonTitleCert_PacketAsync(string UserID, string CityCode, string CountyCode, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getPersonTitleCert_PacketOperationCompleted == null)) {
                this.getPersonTitleCert_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonTitleCert_PacketOperationCompleted);
            }
            this.InvokeAsync("getPersonTitleCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getPersonTitleCert_PacketOperationCompleted, userState);
        }
        
        private void OngetPersonTitleCert_PacketOperationCompleted(object arg) {
            if ((this.getPersonTitleCert_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonTitleCert_PacketCompleted(this, new getPersonTitleCert_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonJobCert_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonJobCert_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IDCardNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonJobCert_Single", new object[] {
                        UserID,
                        IDCardNo,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonJobCert_SingleAsync(string UserID, string IDCardNo, string CertType, string IsZip) {
            this.getPersonJobCert_SingleAsync(UserID, IDCardNo, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonJobCert_SingleAsync(string UserID, string IDCardNo, string CertType, string IsZip, object userState) {
            if ((this.getPersonJobCert_SingleOperationCompleted == null)) {
                this.getPersonJobCert_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonJobCert_SingleOperationCompleted);
            }
            this.InvokeAsync("getPersonJobCert_Single", new object[] {
                        UserID,
                        IDCardNo,
                        CertType,
                        IsZip}, this.getPersonJobCert_SingleOperationCompleted, userState);
        }
        
        private void OngetPersonJobCert_SingleOperationCompleted(object arg) {
            if ((this.getPersonJobCert_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonJobCert_SingleCompleted(this, new getPersonJobCert_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpInfo", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpInfo", new object[] {
                        UserID,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpInfoAsync(string UserID, string IsZip) {
            this.getOutCorpInfoAsync(UserID, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpInfoAsync(string UserID, string IsZip, object userState) {
            if ((this.getOutCorpInfoOperationCompleted == null)) {
                this.getOutCorpInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpInfoOperationCompleted);
            }
            this.InvokeAsync("getOutCorpInfo", new object[] {
                        UserID,
                        IsZip}, this.getOutCorpInfoOperationCompleted, userState);
        }
        
        private void OngetOutCorpInfoOperationCompleted(object arg) {
            if ((this.getOutCorpInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpInfoCompleted(this, new getOutCorpInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getClientIpAxis", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("getClientIpAxisResponse", Namespace="http://webservice.datecenter.jscedc")]
        public getClientIpAxisResponse getClientIpAxis() {
            object[] results = this.Invoke("getClientIpAxis", new object[0]);
            return ((getClientIpAxisResponse)(results[0]));
        }
        
        /// <remarks/>
        public void getClientIpAxisAsync() {
            this.getClientIpAxisAsync(null);
        }
        
        /// <remarks/>
        public void getClientIpAxisAsync(object userState) {
            if ((this.getClientIpAxisOperationCompleted == null)) {
                this.getClientIpAxisOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetClientIpAxisOperationCompleted);
            }
            this.InvokeAsync("getClientIpAxis", new object[0], this.getClientIpAxisOperationCompleted, userState);
        }
        
        private void OngetClientIpAxisOperationCompleted(object arg) {
            if ((this.getClientIpAxisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getClientIpAxisCompleted(this, new getClientIpAxisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonTitleCert_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonTitleCert_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonTitleCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonTitleCert_IncAsync(string UserID, string CityCode, string CountyCode, string StartDate, string EndDate, string IsZip) {
            this.getPersonTitleCert_IncAsync(UserID, CityCode, CountyCode, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonTitleCert_IncAsync(string UserID, string CityCode, string CountyCode, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getPersonTitleCert_IncOperationCompleted == null)) {
                this.getPersonTitleCert_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonTitleCert_IncOperationCompleted);
            }
            this.InvokeAsync("getPersonTitleCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        StartDate,
                        EndDate,
                        IsZip}, this.getPersonTitleCert_IncOperationCompleted, userState);
        }
        
        private void OngetPersonTitleCert_IncOperationCompleted(object arg) {
            if ((this.getPersonTitleCert_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonTitleCert_IncCompleted(this, new getPersonTitleCert_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutPersonCert_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutPersonCert_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutPersonCert_Inc", new object[] {
                        UserID,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutPersonCert_IncAsync(string UserID, string StartDate, string EndDate, string IsZip) {
            this.getOutPersonCert_IncAsync(UserID, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutPersonCert_IncAsync(string UserID, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getOutPersonCert_IncOperationCompleted == null)) {
                this.getOutPersonCert_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutPersonCert_IncOperationCompleted);
            }
            this.InvokeAsync("getOutPersonCert_Inc", new object[] {
                        UserID,
                        StartDate,
                        EndDate,
                        IsZip}, this.getOutPersonCert_IncOperationCompleted, userState);
        }
        
        private void OngetOutPersonCert_IncOperationCompleted(object arg) {
            if ((this.getOutPersonCert_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutPersonCert_IncCompleted(this, new getOutPersonCert_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegPhoto_Corp", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegPhoto_Corp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegPhoto_Corp", new object[] {
                        UserID,
                        CorpCode,
                        RegType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_CorpAsync(string UserID, string CorpCode, string RegType, string IsZip) {
            this.getPersonRegPhoto_CorpAsync(UserID, CorpCode, RegType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_CorpAsync(string UserID, string CorpCode, string RegType, string IsZip, object userState) {
            if ((this.getPersonRegPhoto_CorpOperationCompleted == null)) {
                this.getPersonRegPhoto_CorpOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegPhoto_CorpOperationCompleted);
            }
            this.InvokeAsync("getPersonRegPhoto_Corp", new object[] {
                        UserID,
                        CorpCode,
                        RegType,
                        IsZip}, this.getPersonRegPhoto_CorpOperationCompleted, userState);
        }
        
        private void OngetPersonRegPhoto_CorpOperationCompleted(object arg) {
            if ((this.getPersonRegPhoto_CorpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegPhoto_CorpCompleted(this, new getPersonRegPhoto_CorpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegPhoto_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegPhoto_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegPhoto_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_IncAsync(string UserID, string CityCode, string CountyCode, string RegType, string StartDate, string EndDate, string IsZip) {
            this.getPersonRegPhoto_IncAsync(UserID, CityCode, CountyCode, RegType, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_IncAsync(string UserID, string CityCode, string CountyCode, string RegType, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getPersonRegPhoto_IncOperationCompleted == null)) {
                this.getPersonRegPhoto_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegPhoto_IncOperationCompleted);
            }
            this.InvokeAsync("getPersonRegPhoto_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        StartDate,
                        EndDate,
                        IsZip}, this.getPersonRegPhoto_IncOperationCompleted, userState);
        }
        
        private void OngetPersonRegPhoto_IncOperationCompleted(object arg) {
            if ((this.getPersonRegPhoto_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegPhoto_IncCompleted(this, new getPersonRegPhoto_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegCert_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegCert_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegCert_PacketAsync(string UserID, string CityCode, string CountyCode, string RegType, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getPersonRegCert_PacketAsync(UserID, CityCode, CountyCode, RegType, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegCert_PacketAsync(string UserID, string CityCode, string CountyCode, string RegType, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getPersonRegCert_PacketOperationCompleted == null)) {
                this.getPersonRegCert_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegCert_PacketOperationCompleted);
            }
            this.InvokeAsync("getPersonRegCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getPersonRegCert_PacketOperationCompleted, userState);
        }
        
        private void OngetPersonRegCert_PacketOperationCompleted(object arg) {
            if ((this.getPersonRegCert_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegCert_PacketCompleted(this, new getPersonRegCert_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegPhoto_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegPhoto_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IDCardNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegPhoto_Single", new object[] {
                        UserID,
                        IDCardNo,
                        RegType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_SingleAsync(string UserID, string IDCardNo, string RegType, string IsZip) {
            this.getPersonRegPhoto_SingleAsync(UserID, IDCardNo, RegType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegPhoto_SingleAsync(string UserID, string IDCardNo, string RegType, string IsZip, object userState) {
            if ((this.getPersonRegPhoto_SingleOperationCompleted == null)) {
                this.getPersonRegPhoto_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegPhoto_SingleOperationCompleted);
            }
            this.InvokeAsync("getPersonRegPhoto_Single", new object[] {
                        UserID,
                        IDCardNo,
                        RegType,
                        IsZip}, this.getPersonRegPhoto_SingleOperationCompleted, userState);
        }
        
        private void OngetPersonRegPhoto_SingleOperationCompleted(object arg) {
            if ((this.getPersonRegPhoto_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegPhoto_SingleCompleted(this, new getPersonRegPhoto_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpCert", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpCert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpCertAsync(string UserID, string CityCode, string CountyCode, string CertType, string IsZip) {
            this.getCorpCertAsync(UserID, CityCode, CountyCode, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpCertAsync(string UserID, string CityCode, string CountyCode, string CertType, string IsZip, object userState) {
            if ((this.getCorpCertOperationCompleted == null)) {
                this.getCorpCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpCertOperationCompleted);
            }
            this.InvokeAsync("getCorpCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        IsZip}, this.getCorpCertOperationCompleted, userState);
        }
        
        private void OngetCorpCertOperationCompleted(object arg) {
            if ((this.getCorpCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpCertCompleted(this, new getCorpCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpQual", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpQual([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpQual", new object[] {
                        UserID,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpQualAsync(string UserID, string IsZip) {
            this.getOutCorpQualAsync(UserID, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpQualAsync(string UserID, string IsZip, object userState) {
            if ((this.getOutCorpQualOperationCompleted == null)) {
                this.getOutCorpQualOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpQualOperationCompleted);
            }
            this.InvokeAsync("getOutCorpQual", new object[] {
                        UserID,
                        IsZip}, this.getOutCorpQualOperationCompleted, userState);
        }
        
        private void OngetOutCorpQualOperationCompleted(object arg) {
            if ((this.getOutCorpQualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpQualCompleted(this, new getOutCorpQualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpInfo_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpInfo_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpInfo_Single", new object[] {
                        UserID,
                        CorpCode,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpInfo_SingleAsync(string UserID, string CorpCode, string IsZip) {
            this.getOutCorpInfo_SingleAsync(UserID, CorpCode, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpInfo_SingleAsync(string UserID, string CorpCode, string IsZip, object userState) {
            if ((this.getOutCorpInfo_SingleOperationCompleted == null)) {
                this.getOutCorpInfo_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpInfo_SingleOperationCompleted);
            }
            this.InvokeAsync("getOutCorpInfo_Single", new object[] {
                        UserID,
                        CorpCode,
                        IsZip}, this.getOutCorpInfo_SingleOperationCompleted, userState);
        }
        
        private void OngetOutCorpInfo_SingleOperationCompleted(object arg) {
            if ((this.getOutCorpInfo_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpInfo_SingleCompleted(this, new getOutCorpInfo_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutPersonCert", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutPersonCert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutPersonCert", new object[] {
                        UserID,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutPersonCertAsync(string UserID, string IsZip) {
            this.getOutPersonCertAsync(UserID, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutPersonCertAsync(string UserID, string IsZip, object userState) {
            if ((this.getOutPersonCertOperationCompleted == null)) {
                this.getOutPersonCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutPersonCertOperationCompleted);
            }
            this.InvokeAsync("getOutPersonCert", new object[] {
                        UserID,
                        IsZip}, this.getOutPersonCertOperationCompleted, userState);
        }
        
        private void OngetOutPersonCertOperationCompleted(object arg) {
            if ((this.getOutPersonCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutPersonCertCompleted(this, new getOutPersonCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonJobCert", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonJobCert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonJobCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonJobCertAsync(string UserID, string CityCode, string CountyCode, string CertType, string IsZip) {
            this.getPersonJobCertAsync(UserID, CityCode, CountyCode, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonJobCertAsync(string UserID, string CityCode, string CountyCode, string CertType, string IsZip, object userState) {
            if ((this.getPersonJobCertOperationCompleted == null)) {
                this.getPersonJobCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonJobCertOperationCompleted);
            }
            this.InvokeAsync("getPersonJobCert", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        IsZip}, this.getPersonJobCertOperationCompleted, userState);
        }
        
        private void OngetPersonJobCertOperationCompleted(object arg) {
            if ((this.getPersonJobCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonJobCertCompleted(this, new getPersonJobCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonJobCert_Corp", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonJobCert_Corp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonJobCert_Corp", new object[] {
                        UserID,
                        CorpCode,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonJobCert_CorpAsync(string UserID, string CorpCode, string CertType, string IsZip) {
            this.getPersonJobCert_CorpAsync(UserID, CorpCode, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonJobCert_CorpAsync(string UserID, string CorpCode, string CertType, string IsZip, object userState) {
            if ((this.getPersonJobCert_CorpOperationCompleted == null)) {
                this.getPersonJobCert_CorpOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonJobCert_CorpOperationCompleted);
            }
            this.InvokeAsync("getPersonJobCert_Corp", new object[] {
                        UserID,
                        CorpCode,
                        CertType,
                        IsZip}, this.getPersonJobCert_CorpOperationCompleted, userState);
        }
        
        private void OngetPersonJobCert_CorpOperationCompleted(object arg) {
            if ((this.getPersonJobCert_CorpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonJobCert_CorpCompleted(this, new getPersonJobCert_CorpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpInfo_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpInfo_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpInfo_Single", new object[] {
                        UserID,
                        CorpCode,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpInfo_SingleAsync(string UserID, string CorpCode, string CertType, string IsZip) {
            this.getCorpInfo_SingleAsync(UserID, CorpCode, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpInfo_SingleAsync(string UserID, string CorpCode, string CertType, string IsZip, object userState) {
            if ((this.getCorpInfo_SingleOperationCompleted == null)) {
                this.getCorpInfo_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpInfo_SingleOperationCompleted);
            }
            this.InvokeAsync("getCorpInfo_Single", new object[] {
                        UserID,
                        CorpCode,
                        CertType,
                        IsZip}, this.getCorpInfo_SingleOperationCompleted, userState);
        }
        
        private void OngetCorpInfo_SingleOperationCompleted(object arg) {
            if ((this.getCorpInfo_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpInfo_SingleCompleted(this, new getCorpInfo_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegCert_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegCert_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegCert_IncAsync(string UserID, string CityCode, string CountyCode, string RegType, string StartDate, string EndDate, string IsZip) {
            this.getPersonRegCert_IncAsync(UserID, CityCode, CountyCode, RegType, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegCert_IncAsync(string UserID, string CityCode, string CountyCode, string RegType, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getPersonRegCert_IncOperationCompleted == null)) {
                this.getPersonRegCert_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegCert_IncOperationCompleted);
            }
            this.InvokeAsync("getPersonRegCert_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        StartDate,
                        EndDate,
                        IsZip}, this.getPersonRegCert_IncOperationCompleted, userState);
        }
        
        private void OngetPersonRegCert_IncOperationCompleted(object arg) {
            if ((this.getPersonRegCert_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegCert_IncCompleted(this, new getPersonRegCert_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutPersonCert_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutPersonCert_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutPersonCert_Packet", new object[] {
                        UserID,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutPersonCert_PacketAsync(string UserID, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getOutPersonCert_PacketAsync(UserID, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutPersonCert_PacketAsync(string UserID, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getOutPersonCert_PacketOperationCompleted == null)) {
                this.getOutPersonCert_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutPersonCert_PacketOperationCompleted);
            }
            this.InvokeAsync("getOutPersonCert_Packet", new object[] {
                        UserID,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getOutPersonCert_PacketOperationCompleted, userState);
        }
        
        private void OngetOutPersonCert_PacketOperationCompleted(object arg) {
            if ((this.getOutPersonCert_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutPersonCert_PacketCompleted(this, new getOutPersonCert_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonTitleCert_Corp", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonTitleCert_Corp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CorpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonTitleCert_Corp", new object[] {
                        UserID,
                        CorpCode,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonTitleCert_CorpAsync(string UserID, string CorpCode, string IsZip) {
            this.getPersonTitleCert_CorpAsync(UserID, CorpCode, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonTitleCert_CorpAsync(string UserID, string CorpCode, string IsZip, object userState) {
            if ((this.getPersonTitleCert_CorpOperationCompleted == null)) {
                this.getPersonTitleCert_CorpOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonTitleCert_CorpOperationCompleted);
            }
            this.InvokeAsync("getPersonTitleCert_Corp", new object[] {
                        UserID,
                        CorpCode,
                        IsZip}, this.getPersonTitleCert_CorpOperationCompleted, userState);
        }
        
        private void OngetPersonTitleCert_CorpOperationCompleted(object arg) {
            if ((this.getPersonTitleCert_CorpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonTitleCert_CorpCompleted(this, new getPersonTitleCert_CorpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonTitleCert_Single", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonTitleCert_Single([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IDCardNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonTitleCert_Single", new object[] {
                        UserID,
                        IDCardNo,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonTitleCert_SingleAsync(string UserID, string IDCardNo, string IsZip) {
            this.getPersonTitleCert_SingleAsync(UserID, IDCardNo, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonTitleCert_SingleAsync(string UserID, string IDCardNo, string IsZip, object userState) {
            if ((this.getPersonTitleCert_SingleOperationCompleted == null)) {
                this.getPersonTitleCert_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonTitleCert_SingleOperationCompleted);
            }
            this.InvokeAsync("getPersonTitleCert_Single", new object[] {
                        UserID,
                        IDCardNo,
                        IsZip}, this.getPersonTitleCert_SingleOperationCompleted, userState);
        }
        
        private void OngetPersonTitleCert_SingleOperationCompleted(object arg) {
            if ((this.getPersonTitleCert_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonTitleCert_SingleCompleted(this, new getPersonTitleCert_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpInfo", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpInfo", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpInfoAsync(string UserID, string CityCode, string CountyCode, string CertType, string IsZip) {
            this.getCorpInfoAsync(UserID, CityCode, CountyCode, CertType, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpInfoAsync(string UserID, string CityCode, string CountyCode, string CertType, string IsZip, object userState) {
            if ((this.getCorpInfoOperationCompleted == null)) {
                this.getCorpInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpInfoOperationCompleted);
            }
            this.InvokeAsync("getCorpInfo", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        IsZip}, this.getCorpInfoOperationCompleted, userState);
        }
        
        private void OngetCorpInfoOperationCompleted(object arg) {
            if ((this.getCorpInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpInfoCompleted(this, new getCorpInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getOutCorpInfo_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getOutCorpInfo_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getOutCorpInfo_Packet", new object[] {
                        UserID,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getOutCorpInfo_PacketAsync(string UserID, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getOutCorpInfo_PacketAsync(UserID, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getOutCorpInfo_PacketAsync(string UserID, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getOutCorpInfo_PacketOperationCompleted == null)) {
                this.getOutCorpInfo_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOutCorpInfo_PacketOperationCompleted);
            }
            this.InvokeAsync("getOutCorpInfo_Packet", new object[] {
                        UserID,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getOutCorpInfo_PacketOperationCompleted, userState);
        }
        
        private void OngetOutCorpInfo_PacketOperationCompleted(object arg) {
            if ((this.getOutCorpInfo_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOutCorpInfo_PacketCompleted(this, new getOutCorpInfo_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getCorpInfo_Inc", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getCorpInfo_Inc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EndDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getCorpInfo_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        StartDate,
                        EndDate,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCorpInfo_IncAsync(string UserID, string CityCode, string CountyCode, string CertType, string StartDate, string EndDate, string IsZip) {
            this.getCorpInfo_IncAsync(UserID, CityCode, CountyCode, CertType, StartDate, EndDate, IsZip, null);
        }
        
        /// <remarks/>
        public void getCorpInfo_IncAsync(string UserID, string CityCode, string CountyCode, string CertType, string StartDate, string EndDate, string IsZip, object userState) {
            if ((this.getCorpInfo_IncOperationCompleted == null)) {
                this.getCorpInfo_IncOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorpInfo_IncOperationCompleted);
            }
            this.InvokeAsync("getCorpInfo_Inc", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        StartDate,
                        EndDate,
                        IsZip}, this.getCorpInfo_IncOperationCompleted, userState);
        }
        
        private void OngetCorpInfo_IncOperationCompleted(object arg) {
            if ((this.getCorpInfo_IncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorpInfo_IncCompleted(this, new getCorpInfo_IncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonJobCert_Packet", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonJobCert_Packet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CertType, int PacketNo, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PacketNoSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonJobCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonJobCert_PacketAsync(string UserID, string CityCode, string CountyCode, string CertType, int PacketNo, bool PacketNoSpecified, string IsZip) {
            this.getPersonJobCert_PacketAsync(UserID, CityCode, CountyCode, CertType, PacketNo, PacketNoSpecified, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonJobCert_PacketAsync(string UserID, string CityCode, string CountyCode, string CertType, int PacketNo, bool PacketNoSpecified, string IsZip, object userState) {
            if ((this.getPersonJobCert_PacketOperationCompleted == null)) {
                this.getPersonJobCert_PacketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonJobCert_PacketOperationCompleted);
            }
            this.InvokeAsync("getPersonJobCert_Packet", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        CertType,
                        PacketNo,
                        PacketNoSpecified,
                        IsZip}, this.getPersonJobCert_PacketOperationCompleted, userState);
        }
        
        private void OngetPersonJobCert_PacketOperationCompleted(object arg) {
            if ((this.getPersonJobCert_PacketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonJobCert_PacketCompleted(this, new getPersonJobCert_PacketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getPersonRegPhoto", RequestNamespace="http://webservice.datecenter.jscedc", ResponseNamespace="http://webservice.datecenter.jscedc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType="base64Binary", IsNullable=true)]
        public byte[] getPersonRegPhoto([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CountyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string RegType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IsZip) {
            object[] results = this.Invoke("getPersonRegPhoto", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        IsZip});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersonRegPhotoAsync(string UserID, string CityCode, string CountyCode, string RegType, string IsZip) {
            this.getPersonRegPhotoAsync(UserID, CityCode, CountyCode, RegType, IsZip, null);
        }
        
        /// <remarks/>
        public void getPersonRegPhotoAsync(string UserID, string CityCode, string CountyCode, string RegType, string IsZip, object userState) {
            if ((this.getPersonRegPhotoOperationCompleted == null)) {
                this.getPersonRegPhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonRegPhotoOperationCompleted);
            }
            this.InvokeAsync("getPersonRegPhoto", new object[] {
                        UserID,
                        CityCode,
                        CountyCode,
                        RegType,
                        IsZip}, this.getPersonRegPhotoOperationCompleted, userState);
        }
        
        private void OngetPersonRegPhotoOperationCompleted(object arg) {
            if ((this.getPersonRegPhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonRegPhotoCompleted(this, new getPersonRegPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.8009")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://data.datecenter.jscedc/xsd")]
    public partial class TDataServiceUser {
        
        private string citycodeField;
        
        private string conditionField;
        
        private string countycodeField;
        
        private string endtimeField;
        
        private string newuseridField;
        
        private string starttimeField;
        
        private string statusField;
        
        private string useridField;
        
        private string usernameField;
        
        private string usertypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string citycode {
            get {
                return this.citycodeField;
            }
            set {
                this.citycodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string countycode {
            get {
                return this.countycodeField;
            }
            set {
                this.countycodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string newuserid {
            get {
                return this.newuseridField;
            }
            set {
                this.newuseridField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userid {
            get {
                return this.useridField;
            }
            set {
                this.useridField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string usertype {
            get {
                return this.usertypeField;
            }
            set {
                this.usertypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.8009")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://webservice.datecenter.jscedc")]
    public partial class getClientIpAxisResponse {
        
        private string returnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @return {
            get {
                return this.returnField;
            }
            set {
                this.returnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpQual_IncCompletedEventHandler(object sender, getOutCorpQual_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpQual_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpQual_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutPersonCert_SingleCompletedEventHandler(object sender, getOutPersonCert_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutPersonCert_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutPersonCert_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpQual_SingleCompletedEventHandler(object sender, getOutCorpQual_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpQual_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpQual_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpCert_PacketCompletedEventHandler(object sender, getCorpCert_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpCert_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpCert_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpInfo_PacketCompletedEventHandler(object sender, getCorpInfo_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpInfo_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpInfo_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpCert_SingleCompletedEventHandler(object sender, getCorpCert_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpCert_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpCert_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpQual_PacketCompletedEventHandler(object sender, getOutCorpQual_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpQual_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpQual_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonTitleCertCompletedEventHandler(object sender, getPersonTitleCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonTitleCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonTitleCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getDataUserCompletedEventHandler(object sender, getDataUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TDataServiceUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TDataServiceUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonJobCert_IncCompletedEventHandler(object sender, getPersonJobCert_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonJobCert_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonJobCert_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpInfo_IncCompletedEventHandler(object sender, getOutCorpInfo_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpInfo_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpInfo_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegCert_CorpCompletedEventHandler(object sender, getPersonRegCert_CorpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegCert_CorpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegCert_CorpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegCertCompletedEventHandler(object sender, getPersonRegCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegPhoto_PacketCompletedEventHandler(object sender, getPersonRegPhoto_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegPhoto_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegPhoto_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegCert_SingleCompletedEventHandler(object sender, getPersonRegCert_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegCert_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegCert_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpCert_IncCompletedEventHandler(object sender, getCorpCert_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpCert_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpCert_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonTitleCert_PacketCompletedEventHandler(object sender, getPersonTitleCert_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonTitleCert_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonTitleCert_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonJobCert_SingleCompletedEventHandler(object sender, getPersonJobCert_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonJobCert_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonJobCert_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpInfoCompletedEventHandler(object sender, getOutCorpInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getClientIpAxisCompletedEventHandler(object sender, getClientIpAxisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getClientIpAxisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getClientIpAxisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public getClientIpAxisResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((getClientIpAxisResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonTitleCert_IncCompletedEventHandler(object sender, getPersonTitleCert_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonTitleCert_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonTitleCert_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutPersonCert_IncCompletedEventHandler(object sender, getOutPersonCert_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutPersonCert_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutPersonCert_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegPhoto_CorpCompletedEventHandler(object sender, getPersonRegPhoto_CorpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegPhoto_CorpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegPhoto_CorpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegPhoto_IncCompletedEventHandler(object sender, getPersonRegPhoto_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegPhoto_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegPhoto_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegCert_PacketCompletedEventHandler(object sender, getPersonRegCert_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegCert_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegCert_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegPhoto_SingleCompletedEventHandler(object sender, getPersonRegPhoto_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegPhoto_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegPhoto_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpCertCompletedEventHandler(object sender, getCorpCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpQualCompletedEventHandler(object sender, getOutCorpQualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpQualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpQualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpInfo_SingleCompletedEventHandler(object sender, getOutCorpInfo_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpInfo_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpInfo_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutPersonCertCompletedEventHandler(object sender, getOutPersonCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutPersonCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutPersonCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonJobCertCompletedEventHandler(object sender, getPersonJobCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonJobCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonJobCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonJobCert_CorpCompletedEventHandler(object sender, getPersonJobCert_CorpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonJobCert_CorpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonJobCert_CorpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpInfo_SingleCompletedEventHandler(object sender, getCorpInfo_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpInfo_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpInfo_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegCert_IncCompletedEventHandler(object sender, getPersonRegCert_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegCert_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegCert_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutPersonCert_PacketCompletedEventHandler(object sender, getOutPersonCert_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutPersonCert_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutPersonCert_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonTitleCert_CorpCompletedEventHandler(object sender, getPersonTitleCert_CorpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonTitleCert_CorpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonTitleCert_CorpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonTitleCert_SingleCompletedEventHandler(object sender, getPersonTitleCert_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonTitleCert_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonTitleCert_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpInfoCompletedEventHandler(object sender, getCorpInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getOutCorpInfo_PacketCompletedEventHandler(object sender, getOutCorpInfo_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOutCorpInfo_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOutCorpInfo_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getCorpInfo_IncCompletedEventHandler(object sender, getCorpInfo_IncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorpInfo_IncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCorpInfo_IncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonJobCert_PacketCompletedEventHandler(object sender, getPersonJobCert_PacketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonJobCert_PacketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonJobCert_PacketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    public delegate void getPersonRegPhotoCompletedEventHandler(object sender, getPersonRegPhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.7905")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonRegPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersonRegPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591